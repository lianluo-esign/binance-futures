# Gzip Historical Data Provider Configuration
# Reads compressed historical market data from .gz files

[provider]
# Provider identification - MUST match GzipProvider::CANONICAL_NAME
name = "gzip_historical_provider"  # MUST match GzipProvider::CANONICAL_NAME
type = "GzipProvider"              # MUST match GzipProvider::CANONICAL_TYPE
version = "1.0.0"

[data_source]
# Data source configuration
data_directory = "./data"
file_pattern = "*.gz"  # File pattern to match
symbols = ["BTCFDUSD"]  # Symbols to load
date_range_start = "20250802"  # Optional: start date (YYYYMMDD)
date_range_end = "20250807"    # Optional: end date (YYYYMMDD)

[files]
# Specific files to load (optional, overrides pattern matching)
# Leave empty to use file_pattern
specific_files = [
    "btcfdusd_20250802.gz",
]

[playback]
# Playback configuration
initial_speed = 1.0  # Playback speed multiplier
auto_start = true    # Start playback automatically
loop_enabled = false # Loop when reaching end of data
start_paused = false # Start in paused state

[parsing]
# Data parsing configuration
timestamp_format = "nanoseconds"  # nanoseconds, milliseconds, microseconds
line_delimiter = "\n"
field_separator = " "  # Space between timestamp and JSON
skip_invalid_lines = true
max_parse_errors = 100  # Stop after this many errors

[buffering]
# Buffer configuration for performance
read_buffer_size = 65536  # 64KB
decompress_buffer_size = 131072  # 128KB
event_buffer_size = 10000
prefetch_enabled = true
prefetch_size = 1000

[filtering]
# Data filtering options
filter_by_event_type = false
allowed_event_types = ["bookTicker", "trade", "depthUpdate"]
filter_by_time = false
time_start = 0  # Unix timestamp in milliseconds
time_end = 0    # Unix timestamp in milliseconds
